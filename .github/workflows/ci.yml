# .github/workflows/deploy.yaml nodejs app
name: Test, Build & Deploy
on:
  push:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - uses: act10ns/slack@v1
        with:
         status: starting
         channel: '#project'
         if: always()
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm Install
        id: npm_install
        run: npm install
      - run: yarn add --dev jest-junit
      - name: npm Build
        id: npm_build
        run: npm run build --if-present
      - name: npm test
        id: npm_test
        run: npm test
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (Python ${{ matrix.python-version }})
          path: jest-junit.xml
      - name: Run linters & prettier
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Enable linters
          eslint: true
          prettier: true
      
    
  docker:
      name: Publish doscker hub      
      runs-on: ubuntu-18.04
      needs: [test]
      env:
        REPO: ${{ secrets.DOCKER_REPO }}
      steps:
        - uses: actions/setup-node@v1
        - name: Use Node.js ${{ matrix.node-version }}
          id: setup_NodeJS          
          with:
            node-version: ${{ matrix.node-version }}
        - name: Login Dockerhub
          id: Login_Dockerhub
          uses: docker/login-action@v1
          with:
            username: ${{ env.DOCKERHUB_USERNAME }}
            password: ${{ env.DOCKERHUB_PASSWORD }}
        - name: Build image
          id: Build_Docker
          run: docker build . --no-cache --file Dockerfile -t shelnaop/vault_poc_repo:vault-node_app
        - name: Push Image to Dockerhub
          id: Push_Image
          run: docker push shelnaop/vault_poc_repo:vault-node_app
         
  provision:
    name: Provision env      
    runs-on: ubuntu-18.04
    needs: [docker]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}    
      
  deploy:
    name: Deploy the docker image  
    runs-on: ubuntu-18.04
    needs: [provision]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}  
 
  serviceAvailability:
    name: ServiceAvailability  
    runs-on: ubuntu-18.04
    needs: [deploy]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
  notification:
    name: slack notification  
    runs-on: ubuntu-18.04
    needs: [test, deploy]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
  
  splunk:
    name: splunk  
    runs-on: ubuntu-18.04
    needs: [deploy]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
     
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: test
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: jest-junit.xml      
          
          
     
  Polaris-scan:
    name: "Polaris Scan"
    #needs: build
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:        
      - uses: actions/checkout@v2       
      - name: Static Analysis with Polaris
        shell : bash 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
          export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
          wget -q https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip
          unzip -j polaris_cli-linux64.zip -d /tmp
          /tmp/polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure
   
  Blackduck-SCA:
    name: "Blackduck SCA"
    #needs: build
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:        
      - uses: actions/checkout@v2
      - name: Software Composition Analysis with Black Duck
        uses: blackducksoftware/github-action@v2
        with:
          args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR"'
